<?php
// This code prevents page caching

	header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1			
	header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); 	// Date in the past	
	header("Pragma: no-cache");
?> 

<?php
// Normally, we would place our database connectivity code here.				
// In the case of this 1-2-3 example, you will find it embedded in Step3 below.	

?>

<html>
 
<head>
	<title>Simple Scripting Demo</title>
</head>

<body />
<h2>Simple Scripting Demo</h2>
<br /><br />
<p><b><font color="#ff0000">Step 1 : A simple product display using HTML</font></b></p>

<hr /><br />
<img src="images/1.gif" height=100 width=100 align=left />
Item #1<br />
Category<br />
Description<br />

<br clear=all /><br />
option1desc <br />
<ul>
	<li>option1a</li> <li>option1b</li>
	<li>option1c</li> <li>option1d</li>
</ul>

<br clear=all /><br />
option2desc <br />
<ul>
	<li>option2a</li> <li>option2b</li>
	<li>option2c</li> <li>option2d</li>
</ul>

<!-- ********************************************************************  --> 
<!-- NEXT STEP (2) ******************************************************  --> 
<!-- ********************************************************************  --> 


<br /><br /><br />
<p><b><font color="#ff0000">Step 2 : The next 7 products are displayed by scripting:</font></b></p>
<br><br>


<?php
// "Generate HTML at Server Side using PHP"

	// You don't have to declare variables, but that means you have to be careful!  
	// Doing a typo in a variable name will just create a new one!					
	$intProdNum=1;

	// Simple loop logic to generate repetitive HTML								
	while ($intProdNum++ < 8) {

		// Echo is like a C++ cout, delimited by a set of ' and '												
	
		// . is the PHP string concatenation operator													       	
		// Or, in an echo think of it as a << in C++ ... cout << "My var is " << intProdNum << " , ok? ";		
	
		// Scripting can be dropped into place anywhere! 														
		
		// Note how the variable is being concatenated "into" the image filename								
		// Note how the Item # is now displayed.																
	
		echo '
			<hr /><br />
			<img src="images/' . $intProdNum . '.gif" height=100 width=100 align=left />
			Item #' . $intProdNum . '<br />
			Category<br />
			Description<br />
		';
		
		echo '
			<br clear=all /><br />
			option1desc <br />
			<ul>
				<li>option1a</li> <li>option1b</li>
				<li>option1c</li> <li>option1d</li>
			</ul>
		';

		echo '
			<br clear=all /><br />
			option2desc <br />
			<ul>
				<li>option2a</li> <li>option2b</li>
				<li>option2c</li> <li>option2d</li>
			</ul>
		';

	}
	// End of the while

// End of "Generate HTML at Server Side using PHP"
?>



<!-- ********************************************************************  --> 
<!-- NEXT STEP (3) ******************************************************  --> 
<!-- ********************************************************************  --> 


<br /><br /><br />
<p><b><font color="#ff0000">Step 3 : The next ??? products are generated by scripting, bringing content in from the database ProductsDemo.
<br />Only certain records (Tools category) will be displayed!</font></b></p>


<?php 
// "Database Connectivity"

	// Normally, because you only have to connect once per page,
	// you would put this at the top of the page.				

	
	// Server													
	$db_server = "localhost";
  
	// Database username (root is default)						
	$db_user = "root";
  
	// Database password 										
	// Our database doesn't have a password						
	$db_passwd = "";
  
	// Database name 											
	// In this example, should be the one you created in YeS0	
	$db_name = "ProductsDemo";
	
	// 1. Create a connection to the local database				
	$db_connected = mysql_connect($db_server, $db_user, $db_passwd) 
		or die("Not connected : " . mysql_error());

	// 2. Select the database for use							
	$db_selected = mysql_select_db($db_name, $db_connected) 
		or die("Not selected : " . mysql_error());

// End of "Database Connectivity"		
?>


<?php
// "Retrieve Desired Record Set"

	// If you only plan on executing one SQL statement, you would put this at the top of the page.  
	// If you plan on multiple SQL queries, depending on logic, you could embed in the page. 		
	// In the case of this simple example, I would put this at the top of the page.					

	// Build your SQL query string... MAKE SURE you select all the fields you need!					
	$strSQL = "SELECT ID, Category, Image, Price, Description, Option2Desc FROM Products ORDER BY ID";
	// or  $strSQL = "SELECT * FROM Products ORDER BY ID";											
	
	// Misspell one of the above fieldnames and see what error you get on your webpage.				

	// 3. Execute SQL to seed a "Products Record Set" variable										
	// As always, it is recommended to use relevent variable names.									
	$rsProd = mysql_query($strSQL)
		or die($db_name . " : " . $strSQL . " : " . mysql_error());
		
// End Of "Retrieve Desired Record Set"
?>

<p><b>
<!-- Normally, we would not show this to the user! --> 
<font color="#ff0000">Connected to :: </font><?php echo $db_name; ?> <br />
<font color="#ff0000">Using SQL :: </font><?php echo $strSQL; ?> <br />
<font color="#ff0000">Records retrieved :: </font><?php echo mysql_num_rows($rsProd); ?> <br /><br />
</b></p>


<?php 
// "Display Individual Records"

  // 4. Since in our example our SQL has probably returned more than one record,									
  //    we need to loop through "Products Record Set" to grab each "product row" 									
  
  // 	"mysql_fetch_array(???)" is a function that reads a single record (row) from the provided ??? recordset.	
  
  while ($rowProd = mysql_fetch_array($rsProd)) {
  
    //    Obviously, if you know your previous logic does not retrieve multiple records, you would not need to loop!
    
    // In this simple example, I only want certain records															
    // But this is bad coding... I should have built my SQL to only select the records I want,						
	// thus removing the need for an "if".  Can you implement?														
    if ($rowProd["Category"] == "Tools") {
	   
	   //  Note how the database content is displayed																
	   //  Note the image filename... now pulled from the database													
	   
	   echo '
		<hr /><br />
		<img src="images/' 	. $rowProd["Image"] . '.gif" height=100 width=100 align=left />
		Item #' 			. $rowProd["ID"] .  
		'<br />Price :: ' 		. number_format($rowProd["Price"], 2, ".", ",") . 
		'<br />Category<br />
		Description<br />
	';
		
		// You can't put logic inside an echo, so we closed it above.							
		// Now we can execute some further logic...												
		
		// Display Option1... currently all hardcoded.											
		// Change to be dynamic, from database.													
		if (true) {
			echo '
				<br clear=all /><br />
				option1desc <br />
				<ul>
					<li>option1a</li> <li>option1b</li>
					<li>option1c</li> <li>option1d</li>
				</ul>
			';
		}
		
			
		// Display Option2... currently mostly hardcoded, but with some							
		// provided code for inspiration. Change to be dynamic, from database.					
		if ( $rowProd["Option2Desc"] != "" ) {
		   	echo '
				<br clear=all /><br /> '
				. $rowProd["Option2Desc"] . ' <br /> 
				<ul>
					<li>option2a</li> <li>option2b</li>
					<li>option2c</li> <li>option2d</li>
				</ul>
			';
		}

	   
	} // End of the if		
	
} // End of the while		

// End of "Display Individual Records"	
?>





</BODY>
</HTML>

