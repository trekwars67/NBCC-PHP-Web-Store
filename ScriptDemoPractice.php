<?php
// This code prevents page caching

	header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1			
	header("Expires: Sat, 26 Jul 1997 05:00:00 GMT"); 	// Date in the past	
	header("Pragma: no-cache");
?> 

<?php
// Normally, we would place our database connectivity code here.				
// In the case of this 1-2-3 example, you will find it embedded in Step3 below.	

?>

<html>
 
<head>
	<title>Simple Scripting Demo</title>
</head>

<body />

<!-- ****************************************************************************************************************************************  --> 
<!-- FIRST STEP (1) *************************************************************************************************************************  --> 
<!-- ****************************************************************************************************************************************  --> 

<br /><br /><br />
<p><b><font color="#ff0000">Step 1 : The next 27 products are generated by scripting, bringing content in from the database AndrewMurray.
<br />All records will be displayed!</font></b></p>


<?php 
// "Database Connectivity"

	// Normally, because you only have to connect once per page,
	// you would put this at the top of the page.				

	
	// Server													
	$db_server = "localhost";
  
	// Database username (root is default)						
	$db_user = "root";
  
	// Database password 										
	// Our database doesn't have a password						
	$db_passwd = "";
  
	// Database name 											
	// In this example, it should be the one created for Lab 1	
	$db_name = "AndrewMurray";
	
	// 1. Create a connection to the local database				
	mysql_connect($db_server, $db_user, $db_passwd) 
		or die(mysql_error());

	// 2. Select the database for use							
	mysql_select_db($db_name) 
		or die(mysql_error());

// End of "Database Connectivity"		
?>


<?php
// "Retrieve Desired Record Set"

	// If you only plan on executing one SQL statement, you would put this at the top of the page.  
	// If you plan on multiple SQL queries, depending on logic, you could embed in the page. 		
	// In the case of this simple example, I would put this at the top of the page.					

	// Build the SQL query string... MAKE SURE to select all the Products fields that are needed	
	$strSQL = "SELECT ProductCode, Category, NumberInStock, RegularPrice, ProductDescription, Options, Department FROM Products ORDER BY ProductCode";
	// Misspell one of the above fieldnames and see what error you get on your webpage.				
	
	// or  $strSQL = "SELECT * FROM Products WHERE Category = '$strCategory' ORDER BY ID";				
	// SELECT * is a bad lazy habit to get into.  If you have a large database with many fields,		
	// selecting all of them to save you typing impacts heavily on your server resources!				
	
		
	// For a better understanding of PHP string characteristics, see the StringsDemo.php page.
	
	

	// 3. Execute SQL to seed a "Products Record Set" variable										
	// As always, it is recommended to use relevent variable names.									
	$Prod_rs = mysql_query($strSQL)
		or die(mysql_error());
		
// End Of "Retrieve Desired Record Set"
?>

<p><b>
<!-- Normally, we would not show this to the user! 									--> 
<!-- This is useful debug code so you can see what is going on behind the scenes 	-->
<font color="#ff0000">Connected to :: </font><?php echo $db_name; ?> <br />
<font color="#ff0000">Using SQL :: </font><?php echo $strSQL; ?> <br />
<font color="#ff0000">Records retrieved :: </font><?php echo mysql_num_rows($Prod_rs); ?> <br /><br />
</b></p>


<?php 
// "Display Individual Records"

  // 4. Since in our example our SQL has probably returned more than one record,									
  //    we need to loop through "Products Record Set" to grab each "product row" 									
  
  // 	"mysql_fetch_array(???)" is a function that reads a single record (row) from the provided ??? recordset.	
  
  while ($Prod_row = mysql_fetch_array($Prod_rs)) {
  
    //    Obviously, if you know your previous logic does not retrieve multiple records, you would not need to loop!	
	//	  Keep that in mind for future exercises.																		
   	   
	   //  Note how the database content is displayed																
	   //  Note the image filename... now pulled from the database, and injected into an HTML statement				
	   
	   // If the Department name is a specific value, modify the department variable for correspondence
	   
	   $department;
	   
	   if ($Prod_row["Department"] == "Personal Accessories") {
			$department = "PersonalAccessories";
	   }
	   else if ($Prod_row["Department"] == "Personal Entertainment") {
			$department = "PersonalEntertainment";
	   }
	   else if ($Prod_row["Department"] == "Personal Gadgets") {
			$department = "PersonalGadgets";
	   }
	   
	   // Display the product image, code, regular price, category, and description
	   
	   echo '
		  <hr /><br />
		  <img src="' . $department . '/Images/' 		. $Prod_row["ProductCode"] . '.jpg" height=100 width=100 align=left />
		  Item #' 					. $Prod_row["ProductCode"] .  
		  '<br />Price :: ' 		. number_format($Prod_row["RegularPrice"], 2, ".", ",") . 
		  '<br />Category :: '		. $Prod_row["Category"] . 
		  '<br />Description :: '   . $Prod_row["ProductDescription"] . 
		  '<br />';
		
		// Logic cannot be put inside an echo, so it is closed above.							
		// Now some further logic can be executed...												
			
		// Display Options... currently dynamic, but with some provided code for inspiration. These changes are dynamic, and they are from the database.					
		if ( $Prod_row["Options"] != "" ) {
		   	echo '
				<br clear=all /><br />Options:<br /><ul><li>'
				. $Prod_row["Options"] . '</li></ul> <br />
			';
		}
} // End of the while		

// End of "Display Individual Records"	
?>





</BODY>
</HTML>

